{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { StatusBar } from 'expo-status-bar';\nimport React, { useState } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport { KeyboardAwareScrollView } from 'react-native-keyboard-aware-scroll-view';\nexport default function SearchPage(_ref) {\n  var navigation = _ref.navigation,\n      route = _ref.route;\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      searchString = _useState2[0],\n      setSearchString = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      fetching = _useState4[0],\n      setFetching = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      fetched = _useState6[0],\n      setFetched = _useState6[1];\n\n  var _useState7 = useState(null),\n      _useState8 = _slicedToArray(_useState7, 2),\n      result = _useState8[0],\n      setResult = _useState8[1];\n\n  var _useState9 = useState(''),\n      _useState10 = _slicedToArray(_useState9, 2),\n      errorMessage = _useState10[0],\n      setErrorMessage = _useState10[1];\n\n  var choice = route.params.choice;\n\n  var searchButtonPressed = function searchButtonPressed() {\n    var countries = require(\"i18n-iso-countries\");\n\n    countries.registerLocale(require(\"i18n-iso-countries/langs/en.json\"));\n    var countryCode = countries.getAlpha2Code(searchString, \"en\");\n    var encodedSearchString = encodeURIComponent(searchString);\n    var url = '';\n\n    if (choice == 'CITY') {\n      url = \"https://secure.geonames.org/searchJSON?name_equals=\" + encodedSearchString + \"&maxRows=1&username=weknowit&featureCode=PPLA&featureCode=PPLA2&featureCode=PPLC\";\n    } else if (choice == 'COUNTRY') {\n      url = \"http://api.geonames.org/searchJSON?q=\" + encodedSearchString + \"&maxRows=3&username=weknowit&featureCode=PPLA&featureCode=PPLA2&featureCode=PPLC&country='\" + countryCode + \"'&orderby=population\";\n    }\n\n    apiFetch(url);\n  };\n\n  var apiFetch = function apiFetch(query) {\n    setFetching(true);\n    fetch(query).then(function (response) {\n      return response.json();\n    }).then(function (json) {\n      setFetching(false);\n      setFetched(true);\n      setResult(json.geonames);\n\n      if (json.totalResultsCount == 0 || searchString == '') {\n        setFetched(false);\n        setErrorMessage(\"You need to enter something valid!\");\n      }\n    }).catch(function (error) {\n      console.error(error);\n    });\n  };\n\n  var cityButtonPressed = function cityButtonPressed(cityName) {\n    if (result != null) {\n      setResult(result.filter(function (item) {\n        return item.name === cityName;\n      }));\n    }\n\n    setSearchString(cityName);\n  };\n\n  if (!fetching && !fetched) {\n    return React.createElement(KeyboardAwareScrollView, {\n      contentContainerStyle: styles.container,\n      keyboardShouldPersistTaps: \"handled\"\n    }, React.createElement(Text, {\n      style: styles.title\n    }, \"SEARCH BY \", choice), React.createElement(View, null, React.createElement(TextInput, {\n      style: styles.searchInput,\n      placeholder: \"Enter a \" + (choice == 'CITY' ? \"city\" : \"country\"),\n      onChangeText: function onChangeText(input) {\n        return setSearchString(input);\n      }\n    }), React.createElement(TouchableOpacity, {\n      onPress: function onPress() {\n        return searchButtonPressed();\n      }\n    }, React.createElement(View, {\n      style: styles.view\n    }, React.createElement(Image, {\n      style: styles.searchLogo,\n      source: require(\"../assets/search_logo.png\")\n    }))), React.createElement(View, {\n      style: styles.view\n    }, React.createElement(Text, {\n      style: styles.errorMessage\n    }, errorMessage))), React.createElement(StatusBar, {\n      style: \"auto\"\n    }));\n  } else if (fetching) {\n    return React.createElement(KeyboardAwareScrollView, {\n      contentContainerStyle: styles.container,\n      keyboardShouldPersistTaps: \"handled\"\n    }, React.createElement(View, {\n      style: styles.searchingWheel\n    }, React.createElement(ActivityIndicator, {\n      style: styles.view\n    })), React.createElement(StatusBar, {\n      style: \"auto\"\n    }));\n  } else if (fetched && !fetching) {\n    var output;\n\n    if (result != null) {\n      output = result.map(function (value, keyValue) {\n        if (result.length > 1) {\n          return React.createElement(TouchableOpacity, {\n            style: styles.button,\n            key: keyValue,\n            onPress: function onPress() {\n              return cityButtonPressed(value.name);\n            }\n          }, React.createElement(View, null, React.createElement(Text, {\n            style: styles.buttonText\n          }, value.name)));\n        } else {\n          return React.createElement(View, {\n            key: keyValue,\n            style: styles.population\n          }, React.createElement(Text, {\n            style: {\n              marginTop: 10,\n              marginBottom: 10,\n              fontWeight: 'bold'\n            }\n          }, \"Population\"), React.createElement(Text, {\n            style: {\n              fontSize: 30\n            }\n          }, value.population.toLocaleString().replaceAll(',', ' ')));\n        }\n      });\n    }\n\n    return React.createElement(View, {\n      style: styles.container\n    }, React.createElement(Text, {\n      style: styles.title\n    }, searchString), output);\n  }\n}\nvar styles = StyleSheet.create({\n  searchingWheel: {\n    marginTop: 200\n  },\n  view: {\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  errorMessage: {\n    marginTop: 10,\n    fontFamily: 'Arial',\n    color: 'red'\n  },\n  circle: {\n    width: 50,\n    height: 50,\n    borderRadius: 25,\n    borderWidth: 2,\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  container: {\n    flex: 1,\n    backgroundColor: 'white',\n    alignItems: 'center'\n  },\n  title: {\n    fontSize: 30,\n    fontWeight: 'bold',\n    marginTop: 80,\n    marginBottom: 100\n  },\n  searchLogo: {\n    width: 50,\n    height: 50\n  },\n  searchInput: {\n    height: 50,\n    width: 350,\n    margin: 11,\n    borderWidth: 1,\n    padding: 9\n  },\n  button: {\n    alignItems: 'center',\n    backgroundColor: '#5DADE2',\n    marginBottom: 5,\n    width: 350,\n    height: 50,\n    borderWidth: 2,\n    borderColor: '#2874A6'\n  },\n  buttonText: {\n    color: '#154360',\n    fontSize: 15,\n    padding: 15,\n    fontFamily: 'Arial',\n    fontWeight: 'bold'\n  },\n  population: {\n    alignItems: 'center',\n    backgroundColor: '#5DADE2',\n    borderColor: '#2874A6',\n    width: 350,\n    height: 100,\n    borderWidth: 4\n  }\n});","map":{"version":3,"sources":["/Users/w/Desktop/prog/cityPop-app/src/pages/SearchPage.tsx"],"names":["StatusBar","React","useState","KeyboardAwareScrollView","SearchPage","navigation","route","searchString","setSearchString","fetching","setFetching","fetched","setFetched","result","setResult","errorMessage","setErrorMessage","choice","params","searchButtonPressed","countries","require","registerLocale","countryCode","getAlpha2Code","encodedSearchString","encodeURIComponent","url","apiFetch","query","fetch","then","response","json","geonames","totalResultsCount","catch","error","console","cityButtonPressed","cityName","filter","item","name","styles","container","title","searchInput","input","view","searchLogo","searchingWheel","output","map","value","keyValue","length","button","buttonText","population","marginTop","marginBottom","fontWeight","fontSize","toLocaleString","replaceAll","StyleSheet","create","alignItems","justifyContent","fontFamily","color","circle","width","height","borderRadius","borderWidth","flex","backgroundColor","margin","padding","borderColor"],"mappings":"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","sourcesContent":["import { StatusBar } from 'expo-status-bar';\nimport React, { useState } from 'react';\nimport { StyleSheet, Text, TouchableOpacity, View, TextInput, ActivityIndicator, Image } from 'react-native';\nimport { KeyboardAwareScrollView } from 'react-native-keyboard-aware-scroll-view';\n\nexport default function SearchPage({ navigation, route }: { navigation: any, route: any }) {\n\n  // Initialize state variables\n  const [searchString, setSearchString] = useState('');\n  const [fetching, setFetching] = useState(false);\n  const [fetched, setFetched] = useState(false);\n  const [result, setResult] = useState<null | { population: number[], name: string[] }[]>(null);\n  const [errorMessage, setErrorMessage] = useState('');\n\n  const choice = route.params.choice;\n\n  // Is called when user pushes the search button\n  let searchButtonPressed = () => {\n\n    // The following converts the search string \"Country\" into its corresponding country code. \n    var countries = require(\"i18n-iso-countries\");\n    countries.registerLocale(require(\"i18n-iso-countries/langs/en.json\"));\n    const countryCode = countries.getAlpha2Code(searchString, \"en\");\n\n    const encodedSearchString = encodeURIComponent(searchString);\n\n    let url = '';\n\n    if (choice == 'CITY') {\n      url = `https://secure.geonames.org/searchJSON?name_equals=${encodedSearchString}&maxRows=1&username=weknowit&featureCode=PPLA&featureCode=PPLA2&featureCode=PPLC`;\n    } else if (choice == 'COUNTRY') {\n      url = `http://api.geonames.org/searchJSON?q=${encodedSearchString}&maxRows=3&username=weknowit&featureCode=PPLA&featureCode=PPLA2&featureCode=PPLC&country='${countryCode}'&orderby=population`;\n    }\n    apiFetch(url);\n  }\n\n  // fetches search results from Geonames API\n  let apiFetch = (query: string) => {\n    setFetching(true);\n    fetch(query)\n      .then((response) => response.json())\n      .then((json) => {\n        setFetching(false);\n        setFetched(true);\n        setResult(json.geonames);\n\n        if (json.totalResultsCount == 0 || searchString == '') { // If search returns 0 results\n          setFetched(false);\n          setErrorMessage(`You need to enter something valid!`);\n        }\n      })\n      .catch((error) => {\n        console.error(error);\n      });\n  }\n\n  // Called when user taps on a city result after searching for a country\n  let cityButtonPressed = (cityName: any) => {\n    if (result != null) {\n      setResult(result.filter(item => item.name === cityName));\n    }\n    setSearchString(cityName);\n  }\n\n  if (!fetching && !fetched) { // display search bar and search button \n    return (\n      <KeyboardAwareScrollView contentContainerStyle={styles.container} keyboardShouldPersistTaps=\"handled\">\n        <Text style={styles.title}>SEARCH BY {choice}</Text>\n        <View>\n          <TextInput\n            style={styles.searchInput}\n            placeholder={\"Enter a \" + (choice == 'CITY' ? \"city\" : \"country\")}\n            onChangeText={(input) => setSearchString(input)}\n          />\n          <TouchableOpacity onPress={() => searchButtonPressed()}>\n            <View style={styles.view}>\n              <Image style={styles.searchLogo} source={require('../assets/search_logo.png')} />\n            </View>\n          </TouchableOpacity>\n          <View style={styles.view}>\n            <Text style={styles.errorMessage}>{errorMessage}</Text>\n          </View>\n        </View>\n        <StatusBar style=\"auto\" />\n      </KeyboardAwareScrollView>\n    );\n  } else if (fetching) { // display loading circle while app is fetching results \n    return (\n      <KeyboardAwareScrollView contentContainerStyle={styles.container} keyboardShouldPersistTaps=\"handled\">\n        <View style={styles.searchingWheel}>\n          <ActivityIndicator style={styles.view} />\n        </View>\n        <StatusBar style=\"auto\" />\n      </KeyboardAwareScrollView>\n    );\n  } else if (fetched && !fetching) { // display search results \n    let output;\n    if (result != null) {\n      output = result.map((value, keyValue) => {\n        if (result.length > 1) { // if country search \n          return (\n            <TouchableOpacity style={styles.button} key={keyValue} onPress={() => cityButtonPressed(value.name)}>\n              <View>\n                <Text style={styles.buttonText}>{value.name}</Text>\n              </View>\n            </TouchableOpacity>\n          )\n        } else { // if city search \n          return (\n            <View key={keyValue} style={styles.population}>\n              <Text style={{ marginTop: 10, marginBottom: 10, fontWeight: 'bold' }}>Population</Text>\n              <Text style={{ fontSize: 30 }}>{value.population.toLocaleString().replaceAll(',', ' ')}</Text>\n            </View>\n          )\n        }\n      });\n    }\n    return ( // show final result\n      <View style={styles.container}>\n        <Text style={styles.title}>{searchString}</Text>\n        {output}\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  searchingWheel: {\n    marginTop: 200,\n  },\n\n  view: {\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n\n  errorMessage: {\n    marginTop: 10,\n    fontFamily: 'Arial',\n    color: 'red',\n  },\n\n  circle: {\n    width: 50,\n    height: 50,\n    borderRadius: 25,\n    borderWidth: 2,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n\n  container: {\n    flex: 1,\n    backgroundColor: 'white',\n    alignItems: 'center'\n  },\n\n  title: {\n    fontSize: 30,\n    fontWeight: 'bold',\n    marginTop: 80,\n    marginBottom: 100\n  },\n\n  searchLogo: {\n    width: 50,\n    height: 50\n  },\n\n  searchInput: {\n    height: 50,\n    width: 350,\n    margin: 11,\n    borderWidth: 1,\n    padding: 9\n  },\n\n  button: {\n    alignItems: 'center',\n    backgroundColor: '#5DADE2',\n    marginBottom: 5,\n    width: 350,\n    height: 50,\n    borderWidth: 2,\n    borderColor: '#2874A6'\n  },\n\n  buttonText: {\n    color: '#154360',\n    fontSize: 15,\n    padding: 15,\n    fontFamily: 'Arial',\n    fontWeight: 'bold'\n  },\n\n  population: {\n    alignItems: 'center',\n    backgroundColor: '#5DADE2',\n    borderColor: '#2874A6',\n    width: 350,\n    height: 100,\n    borderWidth: 4\n  }\n});\n\n"]},"metadata":{},"sourceType":"module"}